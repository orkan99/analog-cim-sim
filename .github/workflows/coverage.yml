name: Coverage

on:
  push:
    branches:
      - main
      - dev*
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake python3.8-dev gcc g++ lcov

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Create virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: CMake configure
        run: |
          mkdir build && cd build
          cmake \
            -DCMAKE_BUILD_TYPE=Debug \
            -DPY_INSTALL_PATH=${{github.workspace}}/.venv/lib/python3.8/site-packages \
            -DLIB_TESTS=ON \
            -DBUILD_LIB_CB_EMU=ON \
            -DBUILD_LIB_ACS_INT=ON \
            -DCOVERAGE=ON \
            ../cpp

      - name: Build lib
        run: |
          cmake --build ${{github.workspace}}/build -j $(nproc)

      - name: Code coverage ctest
        working-directory: ${{github.workspace}}/build
        run: |
          ctest -C . --output-on-failure
          lcov --capture --directory . --output-file coverage_int.info --include '*cpp*' --exclude '*extern*'
          COVERAGE_LINES=$(genhtml coverage_int.info --output-directory coverage_int_html | grep 'lines' | awk '{print $2}')
          COVERAGE_FUNC=$(genhtml coverage_int.info --output-directory coverage_int_html | grep 'functions' | awk '{print $2}')
          echo "Coverage lines: $COVERAGE_LINES"
          echo "Coverage functions: $COVERAGE_FUNC"
          echo "COVERAGE_LINES=$COVERAGE_LINES" >> $GITHUB_ENV
          echo "COVERAGE_FUNC=$COVERAGE_FUNC" >> $GITHUB_ENV

      - name: Determine Badge Color
        run: |
          COVERAGE=${{env.COVERAGE_LINES}}
          COVERAGE_INT=${COVERAGE%.*}
          if [ "$COVERAGE_INT" -ge 80 ]; then
            BADGE_COLOR_LINES="brightgreen"
          elif [ "$COVERAGE_INT" -ge 60 ]; then
            BADGE_COLOR_LINES="yellow"
          elif [ "$COVERAGE_INT" -ge 40 ]; then
            BADGE_COLOR_LINES="yellow"
          else
            BADGE_COLOR_LINES="red"
          fi
          echo "Code coverage lines: $COVERAGE_INT %"
          echo "BADGE_COLOR_LINES=$BADGE_COLOR_LINES" >> $GITHUB_ENV

      - name: Create Awesome Badge
        if: github.repository == 'rpelke/analog-cim-sim' && github.event_name != 'pull_request'
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{secrets.GIST_SECRET}}
          gistID: 4ce01f0a4277ab79baa3b2112b12812f
          filename: acs_lines.json
          label: Coverage (lines)
          message: ${{env.COVERAGE_LINES}}
          color: ${{env.BADGE_COLOR_LINES}}

      - name: Upload coverage report
        if: github.repository == 'rpelke/analog-cim-sim' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            build/coverage_int_html
            build/coverage_int.info
